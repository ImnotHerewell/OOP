package com.example.heapsort;

import java.util.ArrayList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/** Main class with tests. */
public class MainHeapSortTest {

  /** Descending sorted list. */
  @Test
  public void heapSortListReverse() {
    ArrayList<Integer> test = new ArrayList<>(Arrays.asList(5, 4, 3, 2, 1));
    ArrayList<Integer> expectedResult = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
    MainHeapSort.heapSort(test);
    Assertions.assertEquals(expectedResult, test);
  }

  /** Ascending sorted list. */
  @Test
  public void heapSortListSimple() {
    ArrayList<Integer> test = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
    ArrayList<Integer> expectedResult = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
    MainHeapSort.heapSort(test);
    Assertions.assertEquals(expectedResult, test);
  }

  /** List with random numbers №1 */
  @Test
  public void heapSortListRandom1() {
    ArrayList<Integer> test =
        new ArrayList<>(
            Arrays.asList(12900, 3131, -3113, 64921, 3441, 45688, -2674, 45411, 91513, 6102));
    ArrayList<Integer> expectedResult =
        new ArrayList<>(
            Arrays.asList(-3113, -2674, 3131, 3441, 6102, 12900, 45411, 45688, 64921, 91513));
    MainHeapSort.heapSort(test);
    Assertions.assertEquals(expectedResult, test);
  }

  /** * List with random numbers №2 */
  @Test
  public void heapSortListRandom2() {
    ArrayList<Integer> test =
        new ArrayList<>(
            Arrays.asList(2549, 51754, 62807, 64991, 15837, 58694, 67632, 89720, 13508, 62430));
    ArrayList<Integer> expectedResult =
        new ArrayList<>(
            Arrays.asList(2549, 13508, 15837, 51754, 58694, 62430, 62807, 64991, 67632, 89720));
    MainHeapSort.heapSort(test);
    Assertions.assertEquals(expectedResult, test);
  }

  /** * List with random numbers №1 */
  @Test
  public void heapSortListRandom3() {
    ArrayList<Integer> test =
        new ArrayList<>(
            Arrays.asList(74267, 90161, 88094, -4032, 15297, 56379, -4069, 29600, 21380, 30568));
    ArrayList<Integer> expectedResult =
        new ArrayList<>(
            Arrays.asList(-4069, -4032, 15297, 21380, 29600, 30568, 56379, 74267, 88094, 90161));
    MainHeapSort.heapSort(test);
    Assertions.assertEquals(expectedResult, test);
  }

  public void heapSortListWithRepeatingNumbers() {
    ArrayList<Integer> test =
        new ArrayList<>(Arrays.asList(691902, 762988, 698286, 333962, 578263, 339558, 53587, 806537, -901982, 235365, -539784, 38421, 382446, 760473, 138564, -220095, -175431, -864339, -571028, -134745, -949113, 957469, -897785, -76356, -854210, -573734, -83862, 277134, 335968, 637401, 814378, -40208, -634434, -120162, -677375, 171313, -457115, 805926, 255541, -786445, -312179, -76854, -546453, 92050, 648536, -70113, 189456, -794398, 409072, 163943, -899692, 614662, 119298, -305161, -679399, -985616, 727717, -20306, 700067, 732294, -826316, 484502, 691687, -87029, 630924, -826121, -439490, -179340, 481226, -516890, 500342, 628672, 819798, -196156, -257722, -353158, -570653, 985313, 381089, -483519, -985565, 445182, -72786, -887857, 711161, 514848, 685409, -879807, -587913, -647372, 369567, 752718, 154459, 352123, 373436, 655065, -338501, 6095, -873644, 878281, -116776, -866083, 902380, 407650, 846381, -780399, 114250, -238723, -421049, 465139, -949988, -163370, -504433, -426057, -109094, -168814, -800566, 539880, 52526, 40873, -25326, 612025, -136698, 165204, -238051, -381914, 129398, -46041, -735560, -90196, 927823, 283497, 161458, 449616, 841061, 181338, -777449, -863714, 959760, 108756, 179494, -439642, 748562, -518611, -740194, -799328, -75463, 917820, 421327, 432752, 698826, -199870, -553659, -610393, -913836, 420453, -850337, 765470, 34181, 642275, -461770, 202369, -876755, -725667, -91449, 161314, 304825, 521432, 408674, -420577, 655964, -535447, -278485, -629571, -583117, 530924, 572775, 119502, -631310, -175354, 635758, -269213, 974611, -859258, 672406, 241206, -743617, -287912, -129540, -976663, 706380, 378067, -634866, -5062, 758738, 68855, 622763, 813070, 945591, -886730, 700842, 371116, 780013, 265688, -5437, -537236, -209898, -562268, -319746, -323487, 911574, -416163, -735655, -933112, -751284, 291276, 332442, 540274, 889762, 107484, 349578, -703824, -834746, -44711, -58232, -586375, -852208, 277010, 950252, 727600, -744484, 75658, -943238, 908756, 244652, -322195, 470117, -417299, 449395, 403279, -339363, 743955, 127814, -151617, 913658, 996511, -369405, -323006, 744759, 57773, -352702, -455302, -253328, 39665, -312929, 86269, 95187, 781735, -710758, 165819, 102197, 455589, 494454, -635953, 401208, 829489, -324818, 394648, -96267, -571337, 655691, 762001, -329393, 567753, 47781, 42276, -159202, 534063, -28382, 186623, -530693, -594383, 97296, -438937, -797005, 163574, -769543, 877529, -292292, 297694, 776635, 480483, 814126, -921176, -389096, -594407, 838283, -908506, 352903, 790891, -891036, 418400, 701861, 186579, -935379, 506490, 822727, -927719, -24360, -67957, -210155, -869460, 854035, -505441, -757842, 530605, 431934, -86247, 141324, -675526, -900230, 385821, -229400, 859182, -627058, -229672, -469519, -770117, 954077, -226474, 241657, 880167, -274857, -260418, -295705, 407252, 330188, 600750, -435054, 459139, -964958, 439996, -335689, -126064, -895503, -686422, -56218, -221630, 55118, -174741, -485009, 270513, -707950, -841962, 922797, -468212, 630608, -85350, 965088, -316190, 143547, 728560, 362957, -316535, -329621, 493885, -548453, 585456, -999661, -38591, 473933, -996577, 278886, 18079, 593758, 745039, 165963, -91383, -856641, 388155, -717135, -516943, -785664, 5321, 343013, -216759, 699645, 621346, 567309, -200037, -633873, -605135, -569889, -873408, 312106, 493313, 215042, -761746, 155012, 971909, -703334, 499727, -773813, -922012, -845488, -567505, 157726, -922287, -15774, 944864, 349787, 992941, 581997, -628860, 231, -309983, -115068, 649045, 894492, 292329, 830391, -390798, -862813, 204033, 326733, 229432, 407451, -26038, 255943, 598907, 446353, 69907, -860994, 591401, 551555, 332708, -78334, 831191, 302090, 352085, 29302, -26626, -928749, 396626, 455291, -63212, 806785, -105856, -205407, -294488, -351452, -273024, -590869, -154491, 102708, -240811, -149378, 829245, 656274, -828980, 827824, -98228, 226312, 102141, -825758, -432563, -644451, 559073, -296736, 768269, 642185, -40323, 432425, 650983, 566067, -268014, -747968, 533664, 858636, -728308, 519239, 990455, 49847, -708307, -404459, 65609, -77641, 448481, -488475, -77242, -854244, -462216, -788643, 553962, -401504, 104331, -99872, -601948, -935649, -962294, -760727, 208554, -811953, 982654, 884364, -897340, -441071, 839942, -501070, -563258, -971705, 80612, 193032, 184280, -687162, -4038, -970584, 26181, 266325, 296573, -420869, -478557, 412634, -65105, 318482, 317868, -405512, 538309, -914425, -748843, 4231, 546461, -563174, -73725, -690404, -247486, 540712, -33515, 667822, 614429, 660862, 108497, 472627, 535173, 639803, 107404, -859449, -431464, 610426, 799838, -708725, -152849, -643966, 466181, 749394, 130359, 940730, 670186, 118010, -497149, -697644, -872891, -734010, -87430, 524727, 542489, 351114, -88702, 8815, 768624, 831903, 388102, 154400, -62612, -412683, -581953, 19011, -985535, -669463, -572848, -793773, -191703, 341672, -321803, -450525, 405295, -816177, 746098, -755672, -47220, 169887, -340090, -62211, 133202, 466914, -828877, 162881, -923247, 570317, 993702, -714538, -695042, 988973, 871748, -890170, 702147, 255077, 696780, 608264, -327185, -711486, 813450, 365979, 243266, -462810, 861065, -979797, -126964, 420223, -576974, -138072, -284340, -120921, -935846, 847517, -136109, 217631, 94441, 471085, -963471, 610746, 732282, 236778, -445000, 161382, -742606, -154662, 60846, 833579, 315243, -78991, 662691, -681695, 715727, 498348, 624727, 692697, -7927, 39808, 942333, -493880, 614355, -804693, 842129, 351779, 207594, -137109, 728555, -572205, 832768, 679171, 514173, -838964, -194292, -888840, 237163, 789474, -558768, 457831, -636494, -571283, 488809, -855775, -604251, 433168, 703469, -815858, 478064, -86237, 497234, -55482, 223303, 862863, -297695, -89958, 456076, 410204, -763954, -408094, -493444, 345749, -597369, -265621, 840133, 716650, -617669, -687993, -239539, -904120, -721015, -221312, 517758, -226951, 755837, 720653, -16423, -492205, 873970, 702426, 98799, 704531, -954369, 493304, -773654, 440814, 328964, 282334, 382124, 616945, 981623, -705442, 670143, -833270, 556822, 840435, -268822, 287423, -302973, -144224, 258839, -551353, 133748, 14495, 340709, -521875, 473239, 58759, 478467, -812121, -68690, -321795, -832188, 662873, 534472, 136421, -916947, -843345, 843282, 792821, 456892, 453821, -512241, -416532, -199753, -426967, -826980, -888980, -24363, -661023, 789484, -46413, -302076, 168045, -291733, 563101, 209525, 372193, -666164, 47663, 766193, 560305, 710502, 537044, -308863, 416742, 359494, 9753, -349430, 330009, -664885, -688687, 967339, 354126, -633633, 386864, -380662, 612852, -295981, 976660, 64797, 48463, 249066, 603912, -127339, 465743, 129530, 850196, 883392, -946417, -427194, 150985, 411468, -755074, -35011, -845548, 354914, 468657, -468691, -128655, 863102, 119845, 940733, -294637, -42056, 871410, -503270, 802893, -106740, 377997, -816701, 418091, -41177, -77661, 582981, 349694, -862649, 218237, -532538, -203196, -321808, -977232, -84098, 868371, -191777, -691896, -997252, -366116, 308886, -44158, 439273, 715861, 163184, -446908, 385600, 879743, 934110, -389500, 643671, 516268, -161711, -863235, -818901, 195647, 534824, 942523, 845999, -395566, -463369, -249157, -214475, -594852, 235688, 774437, 673547, 922417, 447961, 934269, 591571, 805576, 770921, -455813, 5206, -870738, 905067, -299838, 157142, -71618, 111587, 137302, -750041, -9064, 516441, 331013, -347639, 232811, 405602, 311947, 458533, 319368, -449309, -40128, 347543, 375284, -788114, -424750, -332360, 554914, 451622, -493636, -261751, 711857, -149734, 621573, 854760, -866407, 193628, -86012, -663965, -177086, -367434, 902116, 909894, 717572, 899080, 384964, -158366, 651648, 173900, 957688, 838439, -83552, -305074, 727386, 787280, 590837, -525591, 415733, 894613, 929399, 338571, -694344, -225147, 799346, 283044, -24816, -141933, -608856, 250238, 278890, 280158, -365852, 755180, 421425, 927956, 248740, -443730, -89979, 769031, 237324, 833695, -480183, 560583, 320432, -23239, 544779, -602557, 539290, -407955, 778240, -365067, 752972, -591240, -78848, 511043, -739801, 678422, 907263, -255960, 87718, -143882, -116396, -153262, 493988, 478600, -389039, -470741, 58603, -319231, 531513, -560451, -677382, 949776, 953234, 526125, 834439, 908552, -35669, 371535, -649891, -955831, 818007, 760675, 697463, 889681, 183386, -245004, -417444, -145507, 899491, 343836));
    ArrayList<Integer> expectedResult =
        new ArrayList<>(Arrays.asList(-999661,-997252,-996577,-985616,-985565,-985535,-979797,-977232,-976663,-971705,-970584,-964958,-963471,-962294,-955831,-954369,-949988,-949113,-946417,-943238,-935846,-935649,-935379,-933112,-928749,-927719,-923247,-922287,-922012,-921176,-916947,-914425,-913836,-908506,-904120,-901982,-900230,-899692,-897785,-897340,-895503,-891036,-890170,-888980,-888840,-887857,-886730,-879807,-876755,-873644,-873408,-872891,-870738,-869460,-866407,-866083,-864339,-863714,-863235,-862813,-862649,-860994,-859449,-859258,-856641,-855775,-854244,-854210,-852208,-850337,-845548,-845488,-843345,-841962,-838964,-834746,-833270,-832188,-828980,-828877,-826980,-826316,-826121,-825758,-818901,-816701,-816177,-815858,-812121,-811953,-804693,-800566,-799328,-797005,-794398,-793773,-788643,-788114,-786445,-785664,-780399,-777449,-773813,-773654,-770117,-769543,-763954,-761746,-760727,-757842,-755672,-755074,-751284,-750041,-748843,-747968,-744484,-743617,-742606,-740194,-739801,-735655,-735560,-734010,-728308,-725667,-721015,-717135,-714538,-711486,-710758,-708725,-708307,-707950,-705442,-703824,-703334,-697644,-695042,-694344,-691896,-690404,-688687,-687993,-687162,-686422,-681695,-679399,-677382,-677375,-675526,-669463,-666164,-664885,-663965,-661023,-649891,-647372,-644451,-643966,-636494,-635953,-634866,-634434,-633873,-633633,-631310,-629571,-628860,-627058,-617669,-610393,-608856,-605135,-604251,-602557,-601948,-597369,-594852,-594407,-594383,-591240,-590869,-587913,-586375,-583117,-581953,-576974,-573734,-572848,-572205,-571337,-571283,-571028,-570653,-569889,-567505,-563258,-563174,-562268,-560451,-558768,-553659,-551353,-548453,-546453,-539784,-537236,-535447,-532538,-530693,-525591,-521875,-518611,-516943,-516890,-512241,-505441,-504433,-503270,-501070,-497149,-493880,-493636,-493444,-492205,-488475,-485009,-483519,-480183,-478557,-470741,-469519,-468691,-468212,-463369,-462810,-462216,-461770,-457115,-455813,-455302,-450525,-449309,-446908,-445000,-443730,-441071,-439642,-439490,-438937,-435054,-432563,-431464,-427194,-426967,-426057,-424750,-421049,-420869,-420577,-417444,-417299,-416532,-416163,-412683,-408094,-407955,-405512,-404459,-401504,-395566,-390798,-389500,-389096,-389039,-381914,-380662,-369405,-367434,-366116,-365852,-365067,-353158,-352702,-351452,-349430,-347639,-340090,-339363,-338501,-335689,-332360,-329621,-329393,-327185,-324818,-323487,-323006,-322195,-321808,-321803,-321795,-319746,-319231,-316535,-316190,-312929,-312179,-309983,-308863,-305161,-305074,-302973,-302076,-299838,-297695,-296736,-295981,-295705,-294637,-294488,-292292,-291733,-287912,-284340,-278485,-274857,-273024,-269213,-268822,-268014,-265621,-261751,-260418,-257722,-255960,-253328,-249157,-247486,-245004,-240811,-239539,-238723,-238051,-229672,-229400,-226951,-226474,-225147,-221630,-221312,-220095,-216759,-214475,-210155,-209898,-205407,-203196,-200037,-199870,-199753,-196156,-194292,-191777,-191703,-179340,-177086,-175431,-175354,-174741,-168814,-163370,-161711,-159202,-158366,-154662,-154491,-153262,-152849,-151617,-149734,-149378,-145507,-144224,-143882,-141933,-138072,-137109,-136698,-136109,-134745,-129540,-128655,-127339,-126964,-126064,-120921,-120162,-116776,-116396,-115068,-109094,-106740,-105856,-99872,-98228,-96267,-91449,-91383,-90196,-89979,-89958,-88702,-87430,-87029,-86247,-86237,-86012,-85350,-84098,-83862,-83552,-78991,-78848,-78334,-77661,-77641,-77242,-76854,-76356,-75463,-73725,-72786,-71618,-70113,-68690,-67957,-65105,-63212,-62612,-62211,-58232,-56218,-55482,-47220,-46413,-46041,-44711,-44158,-42056,-41177,-40323,-40208,-40128,-38591,-35669,-35011,-33515,-28382,-26626,-26038,-25326,-24816,-24363,-24360,-23239,-20306,-16423,-15774,-9064,-7927,-5437,-5062,-4038,231,4231,5206,5321,6095,8815,9753,14495,18079,19011,26181,29302,34181,38421,39665,39808,40873,42276,47663,47781,48463,49847,52526,53587,55118,57773,58603,58759,60846,64797,65609,68855,69907,75658,80612,86269,87718,92050,94441,95187,97296,98799,102141,102197,102708,104331,107404,107484,108497,108756,111587,114250,118010,119298,119502,119845,127814,129398,129530,130359,133202,133748,136421,137302,138564,141324,143547,150985,154400,154459,155012,157142,157726,161314,161382,161458,162881,163184,163574,163943,165204,165819,165963,168045,169887,171313,173900,179494,181338,183386,184280,186579,186623,189456,193032,193628,195647,202369,204033,207594,208554,209525,215042,217631,218237,223303,226312,229432,232811,235365,235688,236778,237163,237324,241206,241657,243266,244652,248740,249066,250238,255077,255541,255943,258839,265688,266325,270513,277010,277134,278886,278890,280158,282334,283044,283497,287423,291276,292329,296573,297694,302090,304825,308886,311947,312106,315243,317868,318482,319368,320432,326733,328964,330009,330188,331013,332442,332708,333962,335968,338571,339558,340709,341672,343013,343836,345749,347543,349578,349694,349787,351114,351779,352085,352123,352903,354126,354914,359494,362957,365979,369567,371116,371535,372193,373436,375284,377997,378067,381089,382124,382446,384964,385600,385821,386864,388102,388155,394648,396626,401208,403279,405295,405602,407252,407451,407650,408674,409072,410204,411468,412634,415733,416742,418091,418400,420223,420453,421327,421425,431934,432425,432752,433168,439273,439996,440814,445182,446353,447961,448481,449395,449616,451622,453821,455291,455589,456076,456892,457831,458533,459139,465139,465743,466181,466914,468657,470117,471085,472627,473239,473933,478064,478467,478600,480483,481226,484502,488809,493304,493313,493885,493988,494454,497234,498348,499727,500342,506490,511043,514173,514848,516268,516441,517758,519239,521432,524727,526125,530605,530924,531513,533664,534063,534472,534824,535173,537044,538309,539290,539880,540274,540712,542489,544779,546461,551555,553962,554914,556822,559073,560305,560583,563101,566067,567309,567753,570317,572775,578263,581997,582981,585456,590837,591401,591571,593758,598907,600750,603912,608264,610426,610746,612025,612852,614355,614429,614662,616945,621346,621573,622763,624727,628672,630608,630924,635758,637401,639803,642185,642275,643671,648536,649045,650983,651648,655065,655691,655964,656274,660862,662691,662873,667822,670143,670186,672406,673547,678422,679171,685409,691687,691902,692697,696780,697463,698286,698826,699645,700067,700842,701861,702147,702426,703469,704531,706380,710502,711161,711857,715727,715861,716650,717572,720653,727386,727600,727717,728555,728560,732282,732294,743955,744759,745039,746098,748562,749394,752718,752972,755180,755837,758738,760473,760675,762001,762988,765470,766193,768269,768624,769031,770921,774437,776635,778240,780013,781735,787280,789474,789484,790891,792821,799346,799838,802893,805576,805926,806537,806785,813070,813450,814126,814378,818007,819798,822727,827824,829245,829489,830391,831191,831903,832768,833579,833695,834439,838283,838439,839942,840133,840435,841061,842129,843282,845999,846381,847517,850196,854035,854760,858636,859182,861065,862863,863102,868371,871410,871748,873970,877529,878281,879743,880167,883392,884364,889681,889762,894492,894613,899080,899491,902116,902380,905067,907263,908552,908756,909894,911574,913658,917820,922417,922797,927823,927956,929399,934110,934269,940730,940733,942333,942523,944864,945591,949776,950252,953234,954077,957469,957688,959760,965088,967339,971909,974611,976660,981623,982654,985313,988973,990455,992941,993702,996511));
    MainHeapSort.heapSort(test);
    Assertions.assertEquals(expectedResult, test);
  }

//  public void heapSortList1() {
//    ArrayList<Integer> test = new ArrayList<>(Arrays.asList(0, 0, 0, 0, 0));
//    ArrayList<Integer> expectedResult = new ArrayList<>(Arrays.asList(0, 0, 0, 0, 0));
//    MainHeapSort.heapSort(test);
//    Assertions.assertEquals(expectedResult, test);
//  }
}
